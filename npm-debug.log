0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.1.4
3 info using node@v0.10.25
4 verbose node symlink /usr/bin/node
5 verbose publish [ '.' ]
6 silly cache add args [ '.', null ]
7 verbose cache add spec .
8 silly cache add parsed spec { raw: '.',
8 silly cache add   scope: null,
8 silly cache add   name: null,
8 silly cache add   rawSpec: '.',
8 silly cache add   spec: '/home/laso/workspace/prerender-node',
8 silly cache add   type: 'directory' }
9 verbose tar pack [ '/home/laso/.npm/prerender-and-statics-node/0.0.2/package.tgz',
9 verbose tar pack   '/home/laso/workspace/prerender-node' ]
10 verbose tarball /home/laso/.npm/prerender-and-statics-node/0.0.2/package.tgz
11 verbose folder /home/laso/workspace/prerender-node
12 info prepublish prerender-and-statics-node@0.0.2
13 verbose addLocalTarball adding from inside cache /home/laso/.npm/prerender-and-statics-node/0.0.2/package.tgz
14 silly cache afterAdd prerender-and-statics-node@0.0.2
15 verbose afterAdd /home/laso/.npm/prerender-and-statics-node/0.0.2/package/package.json not in flight; writing
16 verbose afterAdd /home/laso/.npm/prerender-and-statics-node/0.0.2/package/package.json written
17 silly publish { name: 'prerender-and-statics-node',
17 silly publish   version: '0.0.2',
17 silly publish   description: 'Fork of prerender-node adding a simple environment configuration to enable that always serves cached pages if needed ',
17 silly publish   author: { name: 'Lasote', url: 'Luis Martínez de Bartolomé' },
17 silly publish   license: 'MIT',
17 silly publish   main: 'index.js',
17 silly publish   repository: { type: 'git', url: 'git://github.com/lasote/prerender-node' },
17 silly publish   keywords: [ 'angular', 'backbone', 'emberjs', 'seo', 'prerender' ],
17 silly publish   devDependencies: { mocha: '~1.13.0', sinon: '~1.7.3' },
17 silly publish   scripts: { test: 'mocha' },
17 silly publish   dependencies: { request: '~2.40.0' },
17 silly publish   readme: 'Prerender Node [![Stories in Ready](https://badge.waffle.io/prerender/prerender-node.png?label=ready&title=Ready)](https://waffle.io/prerender/prerender-node) [![Build Status](https://travis-ci.org/prerender/prerender-node.png)](https://travis-ci.org/prerender/prerender-node) [![NPM version](https://badge.fury.io/js/prerender-node.png)](http://badge.fury.io/js/prerender-node)\n=========================== \n\nGoogle, Facebook, Twitter, Yahoo, and Bing are constantly trying to view your website... but they don\'t execute javascript. That\'s why we built Prerender. Prerender is perfect for AngularJS SEO, BackboneJS SEO, EmberJS SEO, and any other javascript framework.\n\nThis middleware intercepts requests to your Node.js website from crawlers, and then makes a call to the (external) Prerender Service to get the static HTML instead of the javascript for that page.\n\nPrerender adheres to google\'s `_escaped_fragment_` proposal, which we recommend you use. It\'s easy:\n- Just add &lt;meta name="fragment" content="!"> to the &lt;head> of all of your pages\n- If you use hash urls (#), change them to the hash-bang (#!)\n- That\'s it! Perfect SEO on javascript pages.\n\nvia npm:\n\n    $ npm install prerender-node --save\n\nAnd when you set up your express app, add:\n\n```js\napp.use(require(\'prerender-node\'));\n```\n\nor if you have an account on [prerender.io](http://prerender.io) and want to use your token:\n\n```js\napp.use(require(\'prerender-node\').set(\'prerenderToken\', \'YOUR_TOKEN\'));\n```\n\n`Note` If you\'re testing locally, you\'ll need to run the [prerender server](https://github.com/prerender/prerender) locally so that it has access to your server.\n\n## Testing\n\nIf your URLs use a hash-bang:\n\n\tIf you want to see `http://localhost:3000/#!/profiles/1234`\n\tThen go to `http://localhost:3000/?_escaped_fragment_=/profiles/1234`\n\nIf your URLs use push-state:\n\n\tIf you want to see `http://localhost:3000/profiles/1234`\n\tThen go to `http://localhost:3000/profiles/1234?_escaped_fragment_=`\n\n## How it works\n1. The middleware checks to make sure we should show a prerendered page\n\t1. The middleware checks if the request is from a crawler (`_escaped_fragment_` or agent string)\n\t2. The middleware checks to make sure we aren\'t requesting a resource (js, css, etc...)\n\t3. (optional) The middleware checks to make sure the url is in the whitelist\n\t4. (optional) The middleware checks to make sure the url isn\'t in the blacklist\n2. The middleware makes a `GET` request to the [prerender service](https://github.com/prerender/prerender)(phantomjs server) for the page\'s prerendered HTML\n3. Return that HTML to the crawler\n\n# Customization\n\n### Whitelist\n\nWhitelist a single url path or multiple url paths. Compares using regex, so be specific when possible. If a whitelist is supplied, only url\'s containing a whitelist path will be prerendered.\n```js\napp.use(require(\'prerender-node\').whitelisted(\'^/search\'));\n```\n```js\napp.use(require(\'prerender-node\').whitelisted([\'/search\', \'/users/.*/profile\']));\n```\n\n### Blacklist\n\nBlacklist a single url path or multiple url paths. Compares using regex, so be specific when possible. If a blacklist is supplied, all url\'s will be prerendered except ones containing a blacklist path.\n```js\napp.use(require(\'prerender-node\').blacklisted(\'^/search\'));\n```\n```js\napp.use(require(\'prerender-node\').blacklisted([\'/search\', \'/users/.*/profile\']));\n```\n\n### beforeRender\n\nThis method is intended to be used for caching, but could be used to save analytics or anything else you need to do for each crawler request. If you return a string from beforeRender, the middleware will serve that to the crawler instead of making a request to the prerender service.\n```js\napp.use(require(\'prerender-node\').set(\'beforeRender\', function(req, done) {\n\t// do whatever you need to do\n\tdone();\n});\n```\n\n### afterRender\n\nThis method is intended to be used for caching, but could be used to save analytics or anything else you need to do for each crawler request. This method is a noop and is called after the prerender service returns HTML.\n```js\napp.use(require(\'prerender-node\').set(\'afterRender\', function(req, prerender_res) {\n\t// do whatever you need to do\n});\n```\n\n### protocol\n\nOption to hard-set the protocol. Useful for sites that are available on both http and https.\n```js\napp.use(require(\'prerender-node\').set(\'protocol\', \'https\');\n```\n\n## Caching\n\nThis express middleware is ready to be used with [redis](http://redis.io/) or [memcached](http://memcached.org/) to return prerendered pages in milliseconds.\n\nWhen setting up the middleware, you can add a `beforeRender` function and `afterRender` function for caching.\n\nHere\'s an example testing a local redis cache:\n\n\t$ npm install redis\n\n```js\nvar redis = require("redis"),\n\tclient = redis.createClient();\n\nprerender.set(\'beforeRender\', function(req, done) {\n\tclient.get(req.url, done);\n}).set(\'afterRender\', function(req, prerender_res) {\n\tclient.set(req.url, prerender_res.body)\n});\n```\n\n## Using your own prerender service\n\nWe host a Prerender server at [prerender.io](http://prerender.io) so that you can work on more important things, but if you\'ve deployed the prerender service on your own... set the `PRERENDER_SERVICE_URL` environment variable so that this middleware points there instead. Otherwise, it will default to the service already deployed by [prerender.io](http://prerender.io).\n\n\t$ export PRERENDER_SERVICE_URL=<new url>\n\nOr on heroku:\n\n\t$ heroku config:add PRERENDER_SERVICE_URL=<new url>\n\nAs an alternative, you can pass `prerender_service_url` in the options object during initialization of the middleware\n\n```js\napp.use(require(\'prerender-node\').set(\'prerenderServiceUrl\', \'<new url>\'));\n```\n\n## Contributing\n\nWe love any contributions! Feel free to create issues, pull requests, or middleware for other languages/frameworks!\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Todd Hooper &lt;todd@prerender.io&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: '16026a31f72e3c2f603d6cecf3e37708c86c5b27',
17 silly publish   bugs: { url: 'https://github.com/lasote/prerender-node/issues' },
17 silly publish   homepage: 'https://github.com/lasote/prerender-node',
17 silly publish   _id: 'prerender-and-statics-node@0.0.2',
17 silly publish   _shasum: '4bdccfcf07cd2d6c50a59702821f4e5458d85c3b',
17 silly publish   _from: '.' }
18 verbose mapToRegistry name prerender-and-statics-node
19 verbose mapToRegistry uri http://registry.npmjs.org/prerender-and-statics-node
20 verbose publish registryBase http://registry.npmjs.org/
21 verbose request on initialization, where is /prerender-and-statics-node
22 verbose request after pass 1, where is /prerender-and-statics-node
23 verbose request url raw /prerender-and-statics-node
24 verbose request resolving registry [ 'http://registry.npmjs.org/', './prerender-and-statics-node' ]
25 verbose request after pass 2, where is http://registry.npmjs.org/prerender-and-statics-node
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 16:26:45
28 verbose request id b7325b730627dbe6
29 http request PUT http://registry.npmjs.org/prerender-and-statics-node
30 http 403 http://registry.npmjs.org/prerender-and-statics-node
31 verbose headers { server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
31 verbose headers   'content-type': 'application/json',
31 verbose headers   'cache-control': 'max-age=60',
31 verbose headers   'content-length': '10748',
31 verbose headers   'accept-ranges': 'bytes',
31 verbose headers   date: 'Fri, 17 Oct 2014 14:26:47 GMT',
31 verbose headers   via: '1.1 varnish',
31 verbose headers   connection: 'keep-alive',
31 verbose headers   'x-served-by': 'cache-ams4132-AMS',
31 verbose headers   'x-cache': 'MISS',
31 verbose headers   'x-cache-hits': '0',
31 verbose headers   'x-timer': 'S1413556007.235550,VS0,VE758' }
32 error publish Failed PUT 403
33 verbose stack Error: forbidden cannot modify pre-existing version: 0.0.2
33 verbose stack old={"name":"prerender-and-statics-node","version":"0.0.2","description":"Fork of prerender-node adding a simple environment configuration to enable that always serves cached pages if needed ","author":{"name":"Lasote","url":"Luis Martínez de Bartolomé"},"license":"MIT","main":"index.js","repository":{"type":"git","url":"git://github.com/lasote/prerender-node"},"keywords":["angular","backbone","emberjs","seo","prerender"],"devDependencies":{"mocha":"~1.13.0","sinon":"~1.7.3"},"scripts":{"test":"mocha"},"dependencies":{"request":"~2.40.0"},"gitHead":"18b9789ffd6ea531a1fa34e8d5128ea3a622ec29","bugs":{"url":"https://github.com/lasote/prerender-node/issues"},"homepage":"https://github.com/lasote/prerender-node","_id":"prerender-and-statics-node@0.0.2","_shasum":"a61b4b0b8cd581f015f68532d0c54e84e6d1691f","_from":".","_npmVersion":"2.1.4","_nodeVersion":"0.10.25","_npmUser":{"name":"lasote","email":"lasote@gmail.com"},"maintainers":[{"name":"lasote","email":"lasote@gmail.com"}],"dist":{"shasum":"a61b4b0b8cd581f015f68532d0c54e84e6d1691f","tarball":"http://registry.npmjs.org/prerender-and-statics-node/-/prerender-and-statics-node-0.0.2.tgz"}}
33 verbose stack new={"name":"prerender-and-statics-node","version":"0.0.2","description":"Fork of prerender-node adding a simple environment configuration to enable that always serves cached pages if needed ","author":{"name":"Lasote","url":"Luis Martínez de Bartolomé"},"license":"MIT","main":"index.js","repository":{"type":"git","url":"git://github.com/lasote/prerender-node"},"keywords":["angular","backbone","emberjs","seo","prerender"],"devDependencies":{"mocha":"~1.13.0","sinon":"~1.7.3"},"scripts":{"test":"mocha"},"dependencies":{"request":"~2.40.0"},"readme":"Prerender Node [![Stories in Ready](https://badge.waffle.io/prerender/prerender-node.png?label=ready&title=Ready)](https://waffle.io/prerender/prerender-node) [![Build Status](https://travis-ci.org/prerender/prerender-node.png)](https://travis-ci.org/prerender/prerender-node) [![NPM version](https://badge.fury.io/js/prerender-node.png)](http://badge.fury.io/js/prerender-node)\u000a=========================== \u000a\u000aGoogle, Facebook, Twitter, Yahoo, and Bing are constantly trying to view your website... but they don't execute javascript. That's why we built Prerender. Prerender is perfect for AngularJS SEO, BackboneJS SEO, EmberJS SEO, and any other javascript framework.\u000a\u000aThis middleware intercepts requests to your Node.js website from crawlers, and then makes a call to the (external) Prerender Service to get the static HTML instead of the javascript for that page.\u000a\u000aPrerender adheres to google's `_escaped_fragment_` proposal, which we recommend you use. It's easy:\u000a- Just add &lt;meta name=\"fragment\" content=\"!\"> to the &lt;head> of all of your pages\u000a- If you use hash urls (#), change them to the hash-bang (#!)\u000a- That's it! Perfect SEO on javascript pages.\u000a\u000avia npm:\u000a\u000a    $ npm install prerender-node --save\u000a\u000aAnd when you set up your express app, add:\u000a\u000a```js\u000aapp.use(require('prerender-node'));\u000a```\u000a\u000aor if you have an account on [prerender.io](http://prerender.io) and want to use your token:\u000a\u000a```js\u000aapp.use(require('prerender-node').set('prerenderToken', 'YOUR_TOKEN'));\u000a```\u000a\u000a`Note` If you're testing locally, you'll need to run the [prerender server](https://github.com/prerender/prerender) locally so that it has access to your server.\u000a\u000a## Testing\u000a\u000aIf your URLs use a hash-bang:\u000a\u000a\u0009If you want to see `http://localhost:3000/#!/profiles/1234`\u000a\u0009Then go to `http://localhost:3000/?_escaped_fragment_=/profiles/1234`\u000a\u000aIf your URLs use push-state:\u000a\u000a\u0009If you want to see `http://localhost:3000/profiles/1234`\u000a\u0009Then go to `http://localhost:3000/profiles/1234?_escaped_fragment_=`\u000a\u000a## How it works\u000a1. The middleware checks to make sure we should show a prerendered page\u000a\u00091. The middleware checks if the request is from a crawler (`_escaped_fragment_` or agent string)\u000a\u00092. The middleware checks to make sure we aren't requesting a resource (js, css, etc...)\u000a\u00093. (optional) The middleware checks to make sure the url is in the whitelist\u000a\u00094. (optional) The middleware checks to make sure the url isn't in the blacklist\u000a2. The middleware makes a `GET` request to the [prerender service](https://github.com/prerender/prerender)(phantomjs server) for the page's prerendered HTML\u000a3. Return that HTML to the crawler\u000a\u000a# Customization\u000a\u000a### Whitelist\u000a\u000aWhitelist a single url path or multiple url paths. Compares using regex, so be specific when possible. If a whitelist is supplied, only url's containing a whitelist path will be prerendered.\u000a```js\u000aapp.use(require('prerender-node').whitelisted('^/search'));\u000a```\u000a```js\u000aapp.use(require('prerender-node').whitelisted(['/search', '/users/.*/profile']));\u000a```\u000a\u000a### Blacklist\u000a\u000aBlacklist a single url path or multiple url paths. Compares using regex, so be specific when possible. If a blacklist is supplied, all url's will be prerendered except ones containing a blacklist path.\u000a```js\u000aapp.use(require('prerender-node').blacklisted('^/search'));\u000a```\u000a```js\u000aapp.use(require('prerender-node').blacklisted(['/search', '/users/.*/profile']));\u000a```\u000a\u000a### beforeRender\u000a\u000aThis method is intended to be used for caching, but could be used to save analytics or anything else you need to do for each crawler request. If you return a string from beforeRender, the middleware will serve that to the crawler instead of making a request to the prerender service.\u000a```js\u000aapp.use(require('prerender-node').set('beforeRender', function(req, done) {\u000a\u0009// do whatever you need to do\u000a\u0009done();\u000a});\u000a```\u000a\u000a### afterRender\u000a\u000aThis method is intended to be used for caching, but could be used to save analytics or anything else you need to do for each crawler request. This method is a noop and is called after the prerender service returns HTML.\u000a```js\u000aapp.use(require('prerender-node').set('afterRender', function(req, prerender_res) {\u000a\u0009// do whatever you need to do\u000a});\u000a```\u000a\u000a### protocol\u000a\u000aOption to hard-set the protocol. Useful for sites that are available on both http and https.\u000a```js\u000aapp.use(require('prerender-node').set('protocol', 'https');\u000a```\u000a\u000a## Caching\u000a\u000aThis express middleware is ready to be used with [redis](http://redis.io/) or [memcached](http://memcached.org/) to return prerendered pages in milliseconds.\u000a\u000aWhen setting up the middleware, you can add a `beforeRender` function and `afterRender` function for caching.\u000a\u000aHere's an example testing a local redis cache:\u000a\u000a\u0009$ npm install redis\u000a\u000a```js\u000avar redis = require(\"redis\"),\u000a\u0009client = redis.createClient();\u000a\u000aprerender.set('beforeRender', function(req, done) {\u000a\u0009client.get(req.url, done);\u000a}).set('afterRender', function(req, prerender_res) {\u000a\u0009client.set(req.url, prerender_res.body)\u000a});\u000a```\u000a\u000a## Using your own prerender service\u000a\u000aWe host a Prerender server at [prerender.io](http://prerender.io) so that you can work on more important things, but if you've deployed the prerender service on your own... set the `PRERENDER_SERVICE_URL` environment variable so that this middleware points there instead. Otherwise, it will default to the service already deployed by [prerender.io](http://prerender.io).\u000a\u000a\u0009$ export PRERENDER_SERVICE_URL=<new url>\u000a\u000aOr on heroku:\u000a\u000a\u0009$ heroku config:add PRERENDER_SERVICE_URL=<new url>\u000a\u000aAs an alternative, you can pass `prerender_service_url` in the options object during initialization of the middleware\u000a\u000a```js\u000aapp.use(require('prerender-node').set('prerenderServiceUrl', '<new url>'));\u000a```\u000a\u000a## Contributing\u000a\u000aWe love any contributions! Feel free to create issues, pull requests, or middleware for other languages/frameworks!\u000a\u000a## License\u000a\u000aThe MIT License (MIT)\u000a\u000aCopyright (c) 2013 Todd Hooper &lt;todd@prerender.io&gt;\u000a\u000aPermission is hereby granted, free of charge, to any person obtaining a copy\u000aof this software and associated documentation files (the \"Software\"), to deal\u000ain the Software without restriction, including without limitation the rights\u000ato use, copy, modify, merge, publish, distribute, sublicense, and/or sell\u000acopies of the Software, and to permit persons to whom the Software is\u000afurnished to do so, subject to the following conditions:\u000a\u000aThe above copyright notice and this permission notice shall be included in\u000aall copies or substantial portions of the Software.\u000a\u000aTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\u000aIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\u000aFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\u000aAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\u000aLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\u000aOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\u000aTHE SOFTWARE.","readmeFilename":"README.md","gitHead":"16026a31f72e3c2f603d6cecf3e37708c86c5b27","bugs":{"url":"https://github.com/lasote/prerender-node/issues"},"homepage":"https://github.com/lasote/prerender-node","_id":"prerender-and-statics-node@0.0.2","_shasum":"4bdccfcf07cd2d6c50a59702821f4e5458d85c3b","_from":".","_npmVersion":"2.1.4","_nodeVersion":"0.10.25","_npmUser":{"name":"lasote","email":"lasote@gmail.com"},"maintainers":[{"name":"lasote","email":"lasote@gmail.com"}],"dist":{"shasum":"4bdccfcf07cd2d6c50a59702821f4e5458d85c3b","tarball":"http://registry.npmjs.org/prerender-and-statics-node/-/prerender-and-statics-node-0.0.2.tgz"}}: prerender-and-statics-node
33 verbose stack     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:260:14)
33 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:197:65)
33 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:237:22)
33 verbose stack     at Request.EventEmitter.emit (events.js:98:17)
33 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1146:14)
33 verbose stack     at Request.EventEmitter.emit (events.js:117:20)
33 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1097:12)
33 verbose stack     at IncomingMessage.EventEmitter.emit (events.js:117:20)
33 verbose stack     at _stream_readable.js:920:16
33 verbose stack     at process._tickCallback (node.js:415:13)
34 verbose statusCode 403
35 verbose pkgid prerender-and-statics-node
36 verbose cwd /home/laso/workspace/prerender-node
37 error Linux 3.13.0-37-generic
38 error argv "node" "/usr/local/bin/npm" "publish"
39 error node v0.10.25
40 error npm  v2.1.4
41 error code E403
42 error forbidden cannot modify pre-existing version: 0.0.2
42 error old={"name":"prerender-and-statics-node","version":"0.0.2","description":"Fork of prerender-node adding a simple environment configuration to enable that always serves cached pages if needed ","author":{"name":"Lasote","url":"Luis Martínez de Bartolomé"},"license":"MIT","main":"index.js","repository":{"type":"git","url":"git://github.com/lasote/prerender-node"},"keywords":["angular","backbone","emberjs","seo","prerender"],"devDependencies":{"mocha":"~1.13.0","sinon":"~1.7.3"},"scripts":{"test":"mocha"},"dependencies":{"request":"~2.40.0"},"gitHead":"18b9789ffd6ea531a1fa34e8d5128ea3a622ec29","bugs":{"url":"https://github.com/lasote/prerender-node/issues"},"homepage":"https://github.com/lasote/prerender-node","_id":"prerender-and-statics-node@0.0.2","_shasum":"a61b4b0b8cd581f015f68532d0c54e84e6d1691f","_from":".","_npmVersion":"2.1.4","_nodeVersion":"0.10.25","_npmUser":{"name":"lasote","email":"lasote@gmail.com"},"maintainers":[{"name":"lasote","email":"lasote@gmail.com"}],"dist":{"shasum":"a61b4b0b8cd581f015f68532d0c54e84e6d1691f","tarball":"http://registry.npmjs.org/prerender-and-statics-node/-/prerender-and-statics-node-0.0.2.tgz"}}
42 error new={"name":"prerender-and-statics-node","version":"0.0.2","description":"Fork of prerender-node adding a simple environment configuration to enable that always serves cached pages if needed ","author":{"name":"Lasote","url":"Luis Martínez de Bartolomé"},"license":"MIT","main":"index.js","repository":{"type":"git","url":"git://github.com/lasote/prerender-node"},"keywords":["angular","backbone","emberjs","seo","prerender"],"devDependencies":{"mocha":"~1.13.0","sinon":"~1.7.3"},"scripts":{"test":"mocha"},"dependencies":{"request":"~2.40.0"},"readme":"Prerender Node [![Stories in Ready](https://badge.waffle.io/prerender/prerender-node.png?label=ready&title=Ready)](https://waffle.io/prerender/prerender-node) [![Build Status](https://travis-ci.org/prerender/prerender-node.png)](https://travis-ci.org/prerender/prerender-node) [![NPM version](https://badge.fury.io/js/prerender-node.png)](http://badge.fury.io/js/prerender-node)\u000a=========================== \u000a\u000aGoogle, Facebook, Twitter, Yahoo, and Bing are constantly trying to view your website... but they don't execute javascript. That's why we built Prerender. Prerender is perfect for AngularJS SEO, BackboneJS SEO, EmberJS SEO, and any other javascript framework.\u000a\u000aThis middleware intercepts requests to your Node.js website from crawlers, and then makes a call to the (external) Prerender Service to get the static HTML instead of the javascript for that page.\u000a\u000aPrerender adheres to google's `_escaped_fragment_` proposal, which we recommend you use. It's easy:\u000a- Just add &lt;meta name=\"fragment\" content=\"!\"> to the &lt;head> of all of your pages\u000a- If you use hash urls (#), change them to the hash-bang (#!)\u000a- That's it! Perfect SEO on javascript pages.\u000a\u000avia npm:\u000a\u000a    $ npm install prerender-node --save\u000a\u000aAnd when you set up your express app, add:\u000a\u000a```js\u000aapp.use(require('prerender-node'));\u000a```\u000a\u000aor if you have an account on [prerender.io](http://prerender.io) and want to use your token:\u000a\u000a```js\u000aapp.use(require('prerender-node').set('prerenderToken', 'YOUR_TOKEN'));\u000a```\u000a\u000a`Note` If you're testing locally, you'll need to run the [prerender server](https://github.com/prerender/prerender) locally so that it has access to your server.\u000a\u000a## Testing\u000a\u000aIf your URLs use a hash-bang:\u000a\u000a\u0009If you want to see `http://localhost:3000/#!/profiles/1234`\u000a\u0009Then go to `http://localhost:3000/?_escaped_fragment_=/profiles/1234`\u000a\u000aIf your URLs use push-state:\u000a\u000a\u0009If you want to see `http://localhost:3000/profiles/1234`\u000a\u0009Then go to `http://localhost:3000/profiles/1234?_escaped_fragment_=`\u000a\u000a## How it works\u000a1. The middleware checks to make sure we should show a prerendered page\u000a\u00091. The middleware checks if the request is from a crawler (`_escaped_fragment_` or agent string)\u000a\u00092. The middleware checks to make sure we aren't requesting a resource (js, css, etc...)\u000a\u00093. (optional) The middleware checks to make sure the url is in the whitelist\u000a\u00094. (optional) The middleware checks to make sure the url isn't in the blacklist\u000a2. The middleware makes a `GET` request to the [prerender service](https://github.com/prerender/prerender)(phantomjs server) for the page's prerendered HTML\u000a3. Return that HTML to the crawler\u000a\u000a# Customization\u000a\u000a### Whitelist\u000a\u000aWhitelist a single url path or multiple url paths. Compares using regex, so be specific when possible. If a whitelist is supplied, only url's containing a whitelist path will be prerendered.\u000a```js\u000aapp.use(require('prerender-node').whitelisted('^/search'));\u000a```\u000a```js\u000aapp.use(require('prerender-node').whitelisted(['/search', '/users/.*/profile']));\u000a```\u000a\u000a### Blacklist\u000a\u000aBlacklist a single url path or multiple url paths. Compares using regex, so be specific when possible. If a blacklist is supplied, all url's will be prerendered except ones containing a blacklist path.\u000a```js\u000aapp.use(require('prerender-node').blacklisted('^/search'));\u000a```\u000a```js\u000aapp.use(require('prerender-node').blacklisted(['/search', '/users/.*/profile']));\u000a```\u000a\u000a### beforeRender\u000a\u000aThis method is intended to be used for caching, but could be used to save analytics or anything else you need to do for each crawler request. If you return a string from beforeRender, the middleware will serve that to the crawler instead of making a request to the prerender service.\u000a```js\u000aapp.use(require('prerender-node').set('beforeRender', function(req, done) {\u000a\u0009// do whatever you need to do\u000a\u0009done();\u000a});\u000a```\u000a\u000a### afterRender\u000a\u000aThis method is intended to be used for caching, but could be used to save analytics or anything else you need to do for each crawler request. This method is a noop and is called after the prerender service returns HTML.\u000a```js\u000aapp.use(require('prerender-node').set('afterRender', function(req, prerender_res) {\u000a\u0009// do whatever you need to do\u000a});\u000a```\u000a\u000a### protocol\u000a\u000aOption to hard-set the protocol. Useful for sites that are available on both http and https.\u000a```js\u000aapp.use(require('prerender-node').set('protocol', 'https');\u000a```\u000a\u000a## Caching\u000a\u000aThis express middleware is ready to be used with [redis](http://redis.io/) or [memcached](http://memcached.org/) to return prerendered pages in milliseconds.\u000a\u000aWhen setting up the middleware, you can add a `beforeRender` function and `afterRender` function for caching.\u000a\u000aHere's an example testing a local redis cache:\u000a\u000a\u0009$ npm install redis\u000a\u000a```js\u000avar redis = require(\"redis\"),\u000a\u0009client = redis.createClient();\u000a\u000aprerender.set('beforeRender', function(req, done) {\u000a\u0009client.get(req.url, done);\u000a}).set('afterRender', function(req, prerender_res) {\u000a\u0009client.set(req.url, prerender_res.body)\u000a});\u000a```\u000a\u000a## Using your own prerender service\u000a\u000aWe host a Prerender server at [prerender.io](http://prerender.io) so that you can work on more important things, but if you've deployed the prerender service on your own... set the `PRERENDER_SERVICE_URL` environment variable so that this middleware points there instead. Otherwise, it will default to the service already deployed by [prerender.io](http://prerender.io).\u000a\u000a\u0009$ export PRERENDER_SERVICE_URL=<new url>\u000a\u000aOr on heroku:\u000a\u000a\u0009$ heroku config:add PRERENDER_SERVICE_URL=<new url>\u000a\u000aAs an alternative, you can pass `prerender_service_url` in the options object during initialization of the middleware\u000a\u000a```js\u000aapp.use(require('prerender-node').set('prerenderServiceUrl', '<new url>'));\u000a```\u000a\u000a## Contributing\u000a\u000aWe love any contributions! Feel free to create issues, pull requests, or middleware for other languages/frameworks!\u000a\u000a## License\u000a\u000aThe MIT License (MIT)\u000a\u000aCopyright (c) 2013 Todd Hooper &lt;todd@prerender.io&gt;\u000a\u000aPermission is hereby granted, free of charge, to any person obtaining a copy\u000aof this software and associated documentation files (the \"Software\"), to deal\u000ain the Software without restriction, including without limitation the rights\u000ato use, copy, modify, merge, publish, distribute, sublicense, and/or sell\u000acopies of the Software, and to permit persons to whom the Software is\u000afurnished to do so, subject to the following conditions:\u000a\u000aThe above copyright notice and this permission notice shall be included in\u000aall copies or substantial portions of the Software.\u000a\u000aTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\u000aIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\u000aFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\u000aAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\u000aLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\u000aOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\u000aTHE SOFTWARE.","readmeFilename":"README.md","gitHead":"16026a31f72e3c2f603d6cecf3e37708c86c5b27","bugs":{"url":"https://github.com/lasote/prerender-node/issues"},"homepage":"https://github.com/lasote/prerender-node","_id":"prerender-and-statics-node@0.0.2","_shasum":"4bdccfcf07cd2d6c50a59702821f4e5458d85c3b","_from":".","_npmVersion":"2.1.4","_nodeVersion":"0.10.25","_npmUser":{"name":"lasote","email":"lasote@gmail.com"},"maintainers":[{"name":"lasote","email":"lasote@gmail.com"}],"dist":{"shasum":"4bdccfcf07cd2d6c50a59702821f4e5458d85c3b","tarball":"http://registry.npmjs.org/prerender-and-statics-node/-/prerender-and-statics-node-0.0.2.tgz"}}: prerender-and-statics-node
43 error If you need help, you may report this error at:
43 error     <http://github.com/npm/npm/issues>
44 verbose exit [ 1, true ]
